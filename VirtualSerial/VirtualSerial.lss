
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b6  00800100  00001086  0000111a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  008002b6  008002b6  000012d0  2**0
                  ALLOC
  3 .stab         00001d88  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001078  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006a0  00000000  00000000  000040f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ac79  00000000  00000000  00004792  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002da0  00000000  00000000  0000f40b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000426c  00000000  00000000  000121ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000103c  00000000  00000000  00016418  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003eaa  00000000  00000000  00017454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006ad9  00000000  00000000  0001b2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007e0  00000000  00000000  00021dd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	48 c4       	rjmp	.+2192   	; 0x8be <__vector_11>
      2e:	00 00       	nop
      30:	ef c4       	rjmp	.+2526   	; 0xa10 <__vector_12>
      32:	00 00       	nop
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
      4e:	00 00       	nop
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c0       	rjmp	.+236    	; 0x14a <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c0       	rjmp	.+228    	; 0x14a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
      6a:	00 00       	nop
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a 05       	cpc	r22, r10

	ParserData->TotalDeviceReports = 1;
      76:	8c 05       	cpc	r24, r12
      78:	70 06       	cpc	r7, r16
      7a:	8c 05       	cpc	r24, r12
      7c:	70 06       	cpc	r7, r16
      7e:	ce 05       	cpc	r28, r14
      80:	f0 05       	cpc	r31, r0
      82:	70 06       	cpc	r7, r16
      84:	42 06       	cpc	r4, r18
      86:	54 06       	cpc	r5, r20

00000088 <ProductString>:
      88:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      98:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000a6 <ManufacturerString>:
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      a6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      b6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000c0 <LanguageString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      c0:	04 03 09 04                                         ....

000000c4 <ConfigurationDescriptor>:
      c4:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      d4:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      e4:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      f4:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000102 <DeviceDescriptor>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     102:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     112:	dc 01                                               ..

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d4 e0       	ldi	r29, 0x04	; 4
		ReportSize--;
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	12 e0       	ldi	r17, 0x02	; 2
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e6 e8       	ldi	r30, 0x86	; 134
     128:	f0 e1       	ldi	r31, 0x10	; 16
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     130:	a6 3b       	cpi	r26, 0xB6	; 182
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	12 e0       	ldi	r17, 0x02	; 2
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	a6 eb       	ldi	r26, 0xB6	; 182
     13a:	b2 e0       	ldi	r27, 0x02	; 2
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	a1 3d       	cpi	r26, 0xD1	; 209
     142:	b1 07       	cpc	r27, r17
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
     146:	77 d0       	rcall	.+238    	; 0x236 <main>
     148:	9c c7       	rjmp	.+3896   	; 0x1082 <_exit>

0000014a <__bad_interrupt>:
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <Menu_Task>:
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     154:	2a 97       	sbiw	r28, 0x0a	; 10
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     15a:	de bf       	out	0x3e, r29	; 62
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	6a e0       	ldi	r22, 0x0A	; 10
     162:	ce 01       	movw	r24, r28
     164:	01 96       	adiw	r24, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     166:	0f d1       	rcall	.+542    	; 0x386 <SerialReadLine>
     168:	88 23       	and	r24, r24
     16a:	09 f4       	brne	.+2      	; 0x16e <Menu_Task+0x22>
     16c:	46 c0       	rjmp	.+140    	; 0x1fa <Menu_Task+0xae>
     16e:	89 81       	ldd	r24, Y+1	; 0x01
     170:	85 35       	cpi	r24, 0x55	; 85
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     172:	48 f4       	brcc	.+18     	; 0x186 <Menu_Task+0x3a>
     174:	83 35       	cpi	r24, 0x53	; 83
     176:	e8 f4       	brcc	.+58     	; 0x1b2 <Menu_Task+0x66>
     178:	89 34       	cpi	r24, 0x49	; 73
     17a:	d9 f0       	breq	.+54     	; 0x1b2 <Menu_Task+0x66>
     17c:	80 35       	cpi	r24, 0x50	; 80
     17e:	c9 f0       	breq	.+50     	; 0x1b2 <Menu_Task+0x66>
     180:	84 34       	cpi	r24, 0x44	; 68
     182:	d1 f4       	brne	.+52     	; 0x1b8 <Menu_Task+0x6c>
     184:	16 c0       	rjmp	.+44     	; 0x1b2 <Menu_Task+0x66>
				ReportData     += 4;
     186:	89 36       	cpi	r24, 0x69	; 105
     188:	a1 f0       	breq	.+40     	; 0x1b2 <Menu_Task+0x66>
     18a:	28 f4       	brcc	.+10     	; 0x196 <Menu_Task+0x4a>
				break;
     18c:	82 36       	cpi	r24, 0x62	; 98

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     18e:	41 f0       	breq	.+16     	; 0x1a0 <Menu_Task+0x54>
     190:	84 36       	cpi	r24, 0x64	; 100
     192:	91 f4       	brne	.+36     	; 0x1b8 <Menu_Task+0x6c>
     194:	0e c0       	rjmp	.+28     	; 0x1b2 <Menu_Task+0x66>
     196:	80 37       	cpi	r24, 0x70	; 112
     198:	61 f0       	breq	.+24     	; 0x1b2 <Menu_Task+0x66>
     19a:	84 37       	cpi	r24, 0x74	; 116
     19c:	69 f4       	brne	.+26     	; 0x1b8 <Menu_Task+0x6c>
     19e:	09 c0       	rjmp	.+18     	; 0x1b2 <Menu_Task+0x66>
     1a0:	f8 94       	cli
     1a2:	30 d3       	rcall	.+1632   	; 0x804 <USB_Disable>
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
				ReportSize     -= 2;
     1a6:	99 ef       	ldi	r25, 0xF9	; 249
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <Menu_Task+0x5c>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <Menu_Task+0x62>
     1ae:	00 00       	nop
     1b0:	f9 cf       	rjmp	.-14     	; 0x1a4 <Menu_Task+0x58>
     1b2:	8b e1       	ldi	r24, 0x1B	; 27
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	20 c0       	rjmp	.+64     	; 0x1f8 <Menu_Task+0xac>
     1b8:	83 e4       	ldi	r24, 0x43	; 67
				ReportData     += 2;
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	86 d0       	rcall	.+268    	; 0x2ca <SerialPutString>
     1be:	84 e5       	ldi	r24, 0x54	; 84
				break;
     1c0:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1c2:	83 d0       	rcall	.+262    	; 0x2ca <SerialPutString>
     1c4:	8d e6       	ldi	r24, 0x6D	; 109
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	80 d0       	rcall	.+256    	; 0x2ca <SerialPutString>
     1ca:	89 e8       	ldi	r24, 0x89	; 137
     1cc:	91 e0       	ldi	r25, 0x01	; 1
				ReportSize     -= 1;
     1ce:	7d d0       	rcall	.+250    	; 0x2ca <SerialPutString>
     1d0:	86 ea       	ldi	r24, 0xA6	; 166
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	7a d0       	rcall	.+244    	; 0x2ca <SerialPutString>
     1d6:	8e ea       	ldi	r24, 0xAE	; 174
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	77 d0       	rcall	.+238    	; 0x2ca <SerialPutString>
     1dc:	8f ec       	ldi	r24, 0xCF	; 207
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	74 d0       	rcall	.+232    	; 0x2ca <SerialPutString>
				ReportData     += 1;
     1e2:	80 ef       	ldi	r24, 0xF0	; 240
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	71 d0       	rcall	.+226    	; 0x2ca <SerialPutString>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e8:	81 e1       	ldi	r24, 0x11	; 17
     1ea:	92 e0       	ldi	r25, 0x02	; 2
     1ec:	6e d0       	rcall	.+220    	; 0x2ca <SerialPutString>
     1ee:	84 e3       	ldi	r24, 0x34	; 52
     1f0:	92 e0       	ldi	r25, 0x02	; 2
     1f2:	6b d0       	rcall	.+214    	; 0x2ca <SerialPutString>
     1f4:	84 e6       	ldi	r24, 0x64	; 100
     1f6:	92 e0       	ldi	r25, 0x02	; 2
     1f8:	68 d0       	rcall	.+208    	; 0x2ca <SerialPutString>
     1fa:	2a 96       	adiw	r28, 0x0a	; 10
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <SetupHardware>:
     20c:	84 b7       	in	r24, 0x34	; 52

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
     212:	88 e1       	ldi	r24, 0x18	; 24
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
				break;
     218:	80 93 60 00 	sts	0x0060, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     21c:	10 92 60 00 	sts	0x0060, r1
     220:	0f be       	out	0x3f, r0	; 63
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	80 e8       	ldi	r24, 0x80	; 128
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	80 93 61 00 	sts	0x0061, r24
     22e:	90 93 61 00 	sts	0x0061, r25
     232:	0f be       	out	0x3f, r0	; 63
     234:	35 c3       	rjmp	.+1642   	; 0x8a0 <USB_Init>

00000236 <main>:
     236:	ea df       	rcall	.-44     	; 0x20c <SetupHardware>
     238:	66 eb       	ldi	r22, 0xB6	; 182
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     23a:	72 e0       	ldi	r23, 0x02	; 2
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	56 d6       	rcall	.+3244   	; 0xeee <CDC_Device_CreateStream>
     242:	78 94       	sei
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	91 e0       	ldi	r25, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     248:	1c d6       	rcall	.+3128   	; 0xe82 <CDC_Device_ReceiveByte>
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	03 d6       	rcall	.+3078   	; 0xe56 <CDC_Device_USBTask>
     250:	60 d5       	rcall	.+2752   	; 0xd12 <USB_USBTask>
     252:	7c df       	rcall	.-264    	; 0x14c <Menu_Task>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     254:	f7 cf       	rjmp	.-18     	; 0x244 <main+0xe>

00000256 <EVENT_USB_Device_Connect>:
     256:	08 95       	ret

00000258 <EVENT_USB_Device_Disconnect>:
				break;
     258:	08 95       	ret

0000025a <EVENT_USB_Device_ConfigurationChanged>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	75 c5       	rjmp	.+2794   	; 0xd4a <CDC_Device_ConfigureEndpoints>

00000260 <EVENT_USB_Device_ControlRequest>:
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	58 c6       	rjmp	.+3248   	; 0xf16 <CDC_Device_ProcessControlRequest>

00000266 <CALLBACK_USB_GetDescriptor>:
     266:	29 2f       	mov	r18, r25
     268:	33 27       	eor	r19, r19
     26a:	22 30       	cpi	r18, 0x02	; 2
     26c:	31 05       	cpc	r19, r1
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     26e:	59 f0       	breq	.+22     	; 0x286 <CALLBACK_USB_GetDescriptor+0x20>
     270:	23 30       	cpi	r18, 0x03	; 3
				break;
     272:	31 05       	cpc	r19, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     274:	69 f0       	breq	.+26     	; 0x290 <CALLBACK_USB_GetDescriptor+0x2a>
     276:	21 30       	cpi	r18, 0x01	; 1
     278:	31 05       	cpc	r19, r1
     27a:	f9 f4       	brne	.+62     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x54>
     27c:	82 e1       	ldi	r24, 0x12	; 18
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	22 e0       	ldi	r18, 0x02	; 2
     282:	31 e0       	ldi	r19, 0x01	; 1
     284:	1e c0       	rjmp	.+60     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x5c>
     286:	8e e3       	ldi	r24, 0x3E	; 62
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	24 ec       	ldi	r18, 0xC4	; 196
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	19 c0       	rjmp	.+50     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x5c>
     290:	99 27       	eor	r25, r25
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	91 05       	cpc	r25, r1
     296:	41 f0       	breq	.+16     	; 0x2a8 <CALLBACK_USB_GetDescriptor+0x42>
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	91 05       	cpc	r25, r1
     29c:	41 f0       	breq	.+16     	; 0x2ae <CALLBACK_USB_GetDescriptor+0x48>
     29e:	89 2b       	or	r24, r25
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     2a0:	61 f4       	brne	.+24     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x54>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     2a2:	e0 ec       	ldi	r30, 0xC0	; 192
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <CALLBACK_USB_GetDescriptor+0x4c>
     2a8:	e6 ea       	ldi	r30, 0xA6	; 166
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <CALLBACK_USB_GetDescriptor+0x4c>
     2ae:	e8 e8       	ldi	r30, 0x88	; 136
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	84 91       	lpm	r24, Z
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	9f 01       	movw	r18, r30
     2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x5c>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	20 e0       	ldi	r18, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	fa 01       	movw	r30, r20
     2c4:	31 83       	std	Z+1, r19	; 0x01
     2c6:	20 83       	st	Z, r18
     2c8:	08 95       	ret

000002ca <SerialPutString>:
     2ca:	cf 93       	push	r28
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     2cc:	20 91 c8 02 	lds	r18, 0x02C8
     2d0:	24 30       	cpi	r18, 0x04	; 4
     2d2:	69 f5       	brne	.+90     	; 0x32e <SerialPutString+0x64>
     2d4:	20 91 e9 00 	lds	r18, 0x00E9
     2d8:	2f 70       	andi	r18, 0x0F	; 15
     2da:	30 91 ec 00 	lds	r19, 0x00EC
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2de:	30 ff       	sbrs	r19, 0
				break;
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <SerialPutString+0x1c>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2e2:	30 e8       	ldi	r19, 0x80	; 128
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <SerialPutString+0x1e>
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	c3 2f       	mov	r28, r19
     2ea:	c2 2b       	or	r28, r18
     2ec:	23 e0       	ldi	r18, 0x03	; 3
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2ee:	20 93 e9 00 	sts	0x00E9, r18
				break;
     2f2:	fc 01       	movw	r30, r24

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2f4:	01 90       	ld	r0, Z+
     2f6:	00 20       	and	r0, r0
     2f8:	e9 f7       	brne	.-6      	; 0x2f4 <SerialPutString+0x2a>
     2fa:	bf 01       	movw	r22, r30
     2fc:	61 50       	subi	r22, 0x01	; 1
				break;
     2fe:	71 09       	sbc	r23, r1

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     300:	68 1b       	sub	r22, r24
     302:	79 0b       	sbc	r23, r25
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	b5 d0       	rcall	.+362    	; 0x474 <Endpoint_Write_Stream_LE>
     30a:	90 91 f2 00 	lds	r25, 0x00F2
				break;
     30e:	80 91 e8 00 	lds	r24, 0x00E8

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     312:	8e 77       	andi	r24, 0x7E	; 126
     314:	80 93 e8 00 	sts	0x00E8, r24
     318:	90 31       	cpi	r25, 0x10	; 16
				break;
     31a:	31 f4       	brne	.+12     	; 0x328 <SerialPutString+0x5e>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     31c:	43 d2       	rcall	.+1158   	; 0x7a4 <Endpoint_WaitUntilReady>
     31e:	80 91 e8 00 	lds	r24, 0x00E8
     322:	8e 77       	andi	r24, 0x7E	; 126
     324:	80 93 e8 00 	sts	0x00E8, r24
     328:	cf 70       	andi	r28, 0x0F	; 15
				break;
     32a:	c0 93 e9 00 	sts	0x00E9, r28
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <SerialPutChar>:
     332:	cf 93       	push	r28
     334:	90 91 c8 02 	lds	r25, 0x02C8
     338:	94 30       	cpi	r25, 0x04	; 4
				break;
     33a:	19 f5       	brne	.+70     	; 0x382 <SerialPutChar+0x50>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     33c:	90 91 e9 00 	lds	r25, 0x00E9
     340:	9f 70       	andi	r25, 0x0F	; 15
				break;
     342:	20 91 ec 00 	lds	r18, 0x00EC

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     346:	20 ff       	sbrs	r18, 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <SerialPutChar+0x1c>

				if (ParserData->UsingReportIDs)
     34a:	20 e8       	ldi	r18, 0x80	; 128
     34c:	01 c0       	rjmp	.+2      	; 0x350 <SerialPutChar+0x1e>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	c2 2f       	mov	r28, r18
     352:	c9 2b       	or	r28, r25
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	90 93 e9 00 	sts	0x00E9, r25
     35a:	80 93 f1 00 	sts	0x00F1, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     35e:	90 91 f2 00 	lds	r25, 0x00F2
     362:	80 91 e8 00 	lds	r24, 0x00E8
     366:	8e 77       	andi	r24, 0x7E	; 126
     368:	80 93 e8 00 	sts	0x00E8, r24
     36c:	90 31       	cpi	r25, 0x10	; 16
     36e:	31 f4       	brne	.+12     	; 0x37c <SerialPutChar+0x4a>
     370:	19 d2       	rcall	.+1074   	; 0x7a4 <Endpoint_WaitUntilReady>
     372:	80 91 e8 00 	lds	r24, 0x00E8
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     376:	8e 77       	andi	r24, 0x7E	; 126
     378:	80 93 e8 00 	sts	0x00E8, r24
     37c:	cf 70       	andi	r28, 0x0F	; 15
     37e:	c0 93 e9 00 	sts	0x00E9, r28
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <SerialReadLine>:
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	8c 01       	movw	r16, r24
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     3a6:	a1 2c       	mov	r10, r1
     3a8:	e6 2e       	mov	r14, r22
     3aa:	f1 2c       	mov	r15, r1
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     3ac:	b2 d4       	rcall	.+2404   	; 0xd12 <USB_USBTask>
     3ae:	80 91 c8 02 	lds	r24, 0x02C8
     3b2:	84 30       	cpi	r24, 0x04	; 4
     3b4:	d9 f7       	brne	.-10     	; 0x3ac <SerialReadLine+0x26>
     3b6:	80 93 e9 00 	sts	0x00E9, r24
     3ba:	80 91 e8 00 	lds	r24, 0x00E8
     3be:	82 ff       	sbrs	r24, 2
     3c0:	f5 cf       	rjmp	.-22     	; 0x3ac <SerialReadLine+0x26>
     3c2:	80 91 f2 00 	lds	r24, 0x00F2
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	8a 0d       	add	r24, r10
     3ca:	91 1d       	adc	r25, r1
     3cc:	8e 15       	cp	r24, r14
     3ce:	9f 05       	cpc	r25, r15
     3d0:	18 f4       	brcc	.+6      	; 0x3d8 <SerialReadLine+0x52>
     3d2:	81 2c       	mov	r8, r1
     3d4:	91 2c       	mov	r9, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3d6:	22 c0       	rjmp	.+68     	; 0x41c <SerialReadLine+0x96>
     3d8:	8b e8       	ldi	r24, 0x8B	; 139
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	76 df       	rcall	.-276    	; 0x2ca <SerialPutString>
     3de:	f8 01       	movw	r30, r16
     3e0:	ee 0d       	add	r30, r14
     3e2:	ff 1d       	adc	r31, r15
     3e4:	31 97       	sbiw	r30, 0x01	; 1
					}
				}

				ParserData->UsingReportIDs = true;
     3e6:	10 82       	st	Z, r1
     3e8:	80 91 e8 00 	lds	r24, 0x00E8
     3ec:	8b 77       	andi	r24, 0x7B	; 123
     3ee:	80 93 e8 00 	sts	0x00E8, r24
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	31 c0       	rjmp	.+98     	; 0x458 <SerialReadLine+0xd2>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3f6:	90 91 f1 00 	lds	r25, 0x00F1
     3fa:	cb 2c       	mov	r12, r11
     3fc:	d1 2c       	mov	r13, r1
     3fe:	9a 30       	cpi	r25, 0x0A	; 10
     400:	b1 f0       	breq	.+44     	; 0x42e <SerialReadLine+0xa8>
     402:	9d 30       	cpi	r25, 0x0D	; 13
				break;
     404:	a1 f0       	breq	.+40     	; 0x42e <SerialReadLine+0xa8>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     406:	89 2f       	mov	r24, r25
     408:	99 83       	std	Y+1, r25	; 0x01
     40a:	93 df       	rcall	.-218    	; 0x332 <SerialPutChar>
     40c:	f8 01       	movw	r30, r16
     40e:	ec 0d       	add	r30, r12
     410:	fd 1d       	adc	r31, r13
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     412:	99 81       	ldd	r25, Y+1	; 0x01
     414:	90 83       	st	Z, r25
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	88 1a       	sub	r8, r24
     41a:	98 0a       	sbc	r9, r24
     41c:	b8 2c       	mov	r11, r8
     41e:	ba 0c       	add	r11, r10
     420:	20 91 f2 00 	lds	r18, 0x00F2
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	82 16       	cp	r8, r18
     428:	93 06       	cpc	r9, r19
     42a:	28 f3       	brcs	.-54     	; 0x3f6 <SerialReadLine+0x70>
     42c:	0e c0       	rjmp	.+28     	; 0x44a <SerialReadLine+0xc4>
     42e:	80 91 e8 00 	lds	r24, 0x00E8
				break;
     432:	8b 77       	andi	r24, 0x7B	; 123
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     434:	80 93 e8 00 	sts	0x00E8, r24
     438:	82 eb       	ldi	r24, 0xB2	; 178
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	46 df       	rcall	.-372    	; 0x2ca <SerialPutString>
     43e:	f8 01       	movw	r30, r16
     440:	ec 0d       	add	r30, r12
     442:	fd 1d       	adc	r31, r13
     444:	10 82       	st	Z, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     446:	8b 2d       	mov	r24, r11
     448:	07 c0       	rjmp	.+14     	; 0x458 <SerialReadLine+0xd2>
     44a:	80 91 e8 00 	lds	r24, 0x00E8

					while (CurrCollectionPath->Parent != NULL)
     44e:	8b 77       	andi	r24, 0x7B	; 123
     450:	80 93 e8 00 	sts	0x00E8, r24
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     454:	ab 2c       	mov	r10, r11
     456:	aa cf       	rjmp	.-172    	; 0x3ac <SerialReadLine+0x26>
     458:	0f 90       	pop	r0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     46c:	af 90       	pop	r10
     46e:	9f 90       	pop	r9
     470:	8f 90       	pop	r8
				}

				CurrCollectionPath->Type       = ReportItemData;
     472:	08 95       	ret

00000474 <Endpoint_Write_Stream_LE>:
     474:	cf 92       	push	r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29

				if (UsageListSize)
     484:	7c 01       	movw	r14, r24
     486:	8b 01       	movw	r16, r22
     488:	ea 01       	movw	r28, r20
     48a:	8c d1       	rcall	.+792    	; 0x7a4 <Endpoint_WaitUntilReady>
     48c:	81 11       	cpse	r24, r1
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     48e:	30 c0       	rjmp	.+96     	; 0x4f0 <Endpoint_Write_Stream_LE+0x7c>
     490:	20 97       	sbiw	r28, 0x00	; 0
     492:	31 f0       	breq	.+12     	; 0x4a0 <Endpoint_Write_Stream_LE+0x2c>
     494:	88 81       	ld	r24, Y
     496:	99 81       	ldd	r25, Y+1	; 0x01
     498:	08 1b       	sub	r16, r24
     49a:	19 0b       	sbc	r17, r25
     49c:	e8 0e       	add	r14, r24
     49e:	f9 1e       	adc	r15, r25
     4a0:	c1 2c       	mov	r12, r1
     4a2:	d1 2c       	mov	r13, r1

					for (uint8_t i = 1; i < UsageListSize; i++)
     4a4:	01 15       	cp	r16, r1
     4a6:	11 05       	cpc	r17, r1
     4a8:	11 f1       	breq	.+68     	; 0x4ee <Endpoint_Write_Stream_LE+0x7a>
     4aa:	80 91 e8 00 	lds	r24, 0x00E8
     4ae:	85 fd       	sbrc	r24, 5
					  UsageList[i - 1] = UsageList[i];
     4b0:	13 c0       	rjmp	.+38     	; 0x4d8 <Endpoint_Write_Stream_LE+0x64>
     4b2:	80 91 e8 00 	lds	r24, 0x00E8
     4b6:	8e 77       	andi	r24, 0x7E	; 126

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     4b8:	80 93 e8 00 	sts	0x00E8, r24
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     4bc:	20 97       	sbiw	r28, 0x00	; 0
     4be:	41 f0       	breq	.+16     	; 0x4d0 <Endpoint_Write_Stream_LE+0x5c>
     4c0:	88 81       	ld	r24, Y
     4c2:	99 81       	ldd	r25, Y+1	; 0x01
     4c4:	8c 0d       	add	r24, r12
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4c6:	9d 1d       	adc	r25, r13
     4c8:	99 83       	std	Y+1, r25	; 0x01
     4ca:	88 83       	st	Y, r24
     4cc:	85 e0       	ldi	r24, 0x05	; 5
     4ce:	10 c0       	rjmp	.+32     	; 0x4f0 <Endpoint_Write_Stream_LE+0x7c>
     4d0:	69 d1       	rcall	.+722    	; 0x7a4 <Endpoint_WaitUntilReady>
     4d2:	88 23       	and	r24, r24
     4d4:	39 f3       	breq	.-50     	; 0x4a4 <Endpoint_Write_Stream_LE+0x30>
     4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <Endpoint_Write_Stream_LE+0x7c>
     4d8:	f7 01       	movw	r30, r14
     4da:	81 91       	ld	r24, Z+
     4dc:	7f 01       	movw	r14, r30
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4de:	80 93 f1 00 	sts	0x00F1, r24
     4e2:	01 50       	subi	r16, 0x01	; 1
     4e4:	11 09       	sbc	r17, r1
     4e6:	ff ef       	ldi	r31, 0xFF	; 255
     4e8:	cf 1a       	sub	r12, r31
     4ea:	df 0a       	sbc	r13, r31
     4ec:	db cf       	rjmp	.-74     	; 0x4a4 <Endpoint_Write_Stream_LE+0x30>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	08 95       	ret

00000502 <Endpoint_Write_Control_Stream_LE>:
				break;
     502:	20 91 cf 02 	lds	r18, 0x02CF
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     506:	30 91 d0 02 	lds	r19, 0x02D0
     50a:	26 17       	cp	r18, r22
     50c:	37 07       	cpc	r19, r23
     50e:	48 f0       	brcs	.+18     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x20>
     510:	61 15       	cp	r22, r1
     512:	71 05       	cpc	r23, r1
     514:	39 f4       	brne	.+14     	; 0x524 <Endpoint_Write_Control_Stream_LE+0x22>
     516:	20 91 e8 00 	lds	r18, 0x00E8
     51a:	2e 77       	andi	r18, 0x7E	; 126
     51c:	20 93 e8 00 	sts	0x00E8, r18
     520:	01 c0       	rjmp	.+2      	; 0x524 <Endpoint_Write_Control_Stream_LE+0x22>
     522:	b9 01       	movw	r22, r18
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	61 15       	cp	r22, r1
     528:	71 05       	cpc	r23, r1
     52a:	d1 f1       	breq	.+116    	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0x9e>
     52c:	30 91 c8 02 	lds	r19, 0x02C8
     530:	33 23       	and	r19, r19
     532:	09 f4       	brne	.+2      	; 0x536 <Endpoint_Write_Control_Stream_LE+0x34>
     534:	41 c0       	rjmp	.+130    	; 0x5b8 <Endpoint_Write_Control_Stream_LE+0xb6>
     536:	35 30       	cpi	r19, 0x05	; 5
     538:	09 f4       	brne	.+2      	; 0x53c <Endpoint_Write_Control_Stream_LE+0x3a>
     53a:	40 c0       	rjmp	.+128    	; 0x5bc <Endpoint_Write_Control_Stream_LE+0xba>
     53c:	30 91 e8 00 	lds	r19, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     540:	33 fd       	sbrc	r19, 3
     542:	38 c0       	rjmp	.+112    	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0xb2>
     544:	30 91 e8 00 	lds	r19, 0x00E8
     548:	32 ff       	sbrs	r19, 2
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     54a:	06 c0       	rjmp	.+12     	; 0x558 <Endpoint_Write_Control_Stream_LE+0x56>
     54c:	80 91 e8 00 	lds	r24, 0x00E8
     550:	82 ff       	sbrs	r24, 2
     552:	29 c0       	rjmp	.+82     	; 0x5a6 <Endpoint_Write_Control_Stream_LE+0xa4>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	08 95       	ret
     558:	30 91 e8 00 	lds	r19, 0x00E8
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     55c:	30 ff       	sbrs	r19, 0
     55e:	e3 cf       	rjmp	.-58     	; 0x526 <Endpoint_Write_Control_Stream_LE+0x24>
					NewReportItem.CollectionPath = CurrCollectionPath;
     560:	20 91 f2 00 	lds	r18, 0x00F2
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	fc 01       	movw	r30, r24
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     568:	28 1b       	sub	r18, r24
     56a:	39 0b       	sbc	r19, r25
     56c:	cf 01       	movw	r24, r30
     56e:	82 0f       	add	r24, r18

					if (UsageListSize)
     570:	93 1f       	adc	r25, r19
     572:	61 15       	cp	r22, r1
     574:	71 05       	cpc	r23, r1
     576:	49 f0       	breq	.+18     	; 0x58a <Endpoint_Write_Control_Stream_LE+0x88>
     578:	88 30       	cpi	r24, 0x08	; 8
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     57a:	91 05       	cpc	r25, r1
     57c:	30 f4       	brcc	.+12     	; 0x58a <Endpoint_Write_Control_Stream_LE+0x88>
     57e:	81 91       	ld	r24, Z+
     580:	80 93 f1 00 	sts	0x00F1, r24
     584:	61 50       	subi	r22, 0x01	; 1
     586:	71 09       	sbc	r23, r1
     588:	f1 cf       	rjmp	.-30     	; 0x56c <Endpoint_Write_Control_Stream_LE+0x6a>
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	08 97       	sbiw	r24, 0x08	; 8
     58e:	09 f0       	breq	.+2      	; 0x592 <Endpoint_Write_Control_Stream_LE+0x90>

						for (uint8_t i = 1; i < UsageListSize; i++)
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	80 91 e8 00 	lds	r24, 0x00E8
     596:	8e 77       	andi	r24, 0x7E	; 126
     598:	80 93 e8 00 	sts	0x00E8, r24
						  UsageList[i - 1] = UsageList[i];
     59c:	cf 01       	movw	r24, r30
     59e:	c3 cf       	rjmp	.-122    	; 0x526 <Endpoint_Write_Control_Stream_LE+0x24>
     5a0:	21 11       	cpse	r18, r1
     5a2:	c4 cf       	rjmp	.-120    	; 0x52c <Endpoint_Write_Control_Stream_LE+0x2a>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     5a4:	d3 cf       	rjmp	.-90     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x4a>
     5a6:	80 91 c8 02 	lds	r24, 0x02C8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     5aa:	88 23       	and	r24, r24
     5ac:	29 f0       	breq	.+10     	; 0x5b8 <Endpoint_Write_Control_Stream_LE+0xb6>
     5ae:	85 30       	cpi	r24, 0x05	; 5
     5b0:	69 f6       	brne	.-102    	; 0x54c <Endpoint_Write_Control_Stream_LE+0x4a>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <Endpoint_Write_Control_Stream_LE+0xba>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	08 95       	ret
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	08 95       	ret

000005c0 <Endpoint_Write_Control_PStream_LE>:
     5c0:	20 91 cf 02 	lds	r18, 0x02CF
     5c4:	30 91 d0 02 	lds	r19, 0x02D0
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     5c8:	26 17       	cp	r18, r22
     5ca:	37 07       	cpc	r19, r23
     5cc:	48 f0       	brcs	.+18     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x20>
     5ce:	61 15       	cp	r22, r1
     5d0:	71 05       	cpc	r23, r1
     5d2:	39 f4       	brne	.+14     	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x22>
     5d4:	20 91 e8 00 	lds	r18, 0x00E8
     5d8:	2e 77       	andi	r18, 0x7E	; 126
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     5da:	20 93 e8 00 	sts	0x00E8, r18
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x22>
     5e0:	b9 01       	movw	r22, r18
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	61 15       	cp	r22, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     5e6:	71 05       	cpc	r23, r1
     5e8:	d9 f1       	breq	.+118    	; 0x660 <Endpoint_Write_Control_PStream_LE+0xa0>
     5ea:	30 91 c8 02 	lds	r19, 0x02C8
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     5ee:	33 23       	and	r19, r19

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0x34>
     5f2:	42 c0       	rjmp	.+132    	; 0x678 <Endpoint_Write_Control_PStream_LE+0xb8>
     5f4:	35 30       	cpi	r19, 0x05	; 5
     5f6:	09 f4       	brne	.+2      	; 0x5fa <Endpoint_Write_Control_PStream_LE+0x3a>
     5f8:	41 c0       	rjmp	.+130    	; 0x67c <Endpoint_Write_Control_PStream_LE+0xbc>
     5fa:	30 91 e8 00 	lds	r19, 0x00E8
     5fe:	33 fd       	sbrc	r19, 3
     600:	39 c0       	rjmp	.+114    	; 0x674 <Endpoint_Write_Control_PStream_LE+0xb4>
     602:	30 91 e8 00 	lds	r19, 0x00E8
     606:	32 ff       	sbrs	r19, 2
     608:	06 c0       	rjmp	.+12     	; 0x616 <Endpoint_Write_Control_PStream_LE+0x56>
     60a:	80 91 e8 00 	lds	r24, 0x00E8

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     60e:	82 ff       	sbrs	r24, 2
     610:	2a c0       	rjmp	.+84     	; 0x666 <Endpoint_Write_Control_PStream_LE+0xa6>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	08 95       	ret
     616:	30 91 e8 00 	lds	r19, 0x00E8
     61a:	30 ff       	sbrs	r19, 0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     61c:	e3 cf       	rjmp	.-58     	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0x24>
     61e:	20 91 f2 00 	lds	r18, 0x00F2
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	28 1b       	sub	r18, r24
     628:	39 0b       	sbc	r19, r25
     62a:	c9 01       	movw	r24, r18
     62c:	8e 0f       	add	r24, r30
     62e:	9f 1f       	adc	r25, r31
     630:	61 15       	cp	r22, r1
     632:	71 05       	cpc	r23, r1
     634:	51 f0       	breq	.+20     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x8a>
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	91 05       	cpc	r25, r1
     63a:	38 f4       	brcc	.+14     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x8a>
     63c:	84 91       	lpm	r24, Z
     63e:	80 93 f1 00 	sts	0x00F1, r24
     642:	31 96       	adiw	r30, 0x01	; 1
     644:	61 50       	subi	r22, 0x01	; 1
     646:	71 09       	sbc	r23, r1
     648:	f0 cf       	rjmp	.-32     	; 0x62a <Endpoint_Write_Control_PStream_LE+0x6a>
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	08 97       	sbiw	r24, 0x08	; 8
     64e:	09 f0       	breq	.+2      	; 0x652 <Endpoint_Write_Control_PStream_LE+0x92>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	80 91 e8 00 	lds	r24, 0x00E8
     656:	8e 77       	andi	r24, 0x7E	; 126
     658:	80 93 e8 00 	sts	0x00E8, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     65c:	cf 01       	movw	r24, r30
     65e:	c2 cf       	rjmp	.-124    	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0x24>
     660:	21 11       	cpse	r18, r1
     662:	c3 cf       	rjmp	.-122    	; 0x5ea <Endpoint_Write_Control_PStream_LE+0x2a>
     664:	d2 cf       	rjmp	.-92     	; 0x60a <Endpoint_Write_Control_PStream_LE+0x4a>
					  return HID_PARSE_InsufficientReportItems;
     666:	80 91 c8 02 	lds	r24, 0x02C8

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     66a:	88 23       	and	r24, r24
     66c:	29 f0       	breq	.+10     	; 0x678 <Endpoint_Write_Control_PStream_LE+0xb8>
     66e:	85 30       	cpi	r24, 0x05	; 5
     670:	61 f6       	brne	.-104    	; 0x60a <Endpoint_Write_Control_PStream_LE+0x4a>
     672:	04 c0       	rjmp	.+8      	; 0x67c <Endpoint_Write_Control_PStream_LE+0xbc>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	08 95       	ret
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	08 95       	ret

00000680 <Endpoint_ConfigureEndpoint_Prv>:
     680:	98 2f       	mov	r25, r24
     682:	95 30       	cpi	r25, 0x05	; 5
     684:	58 f5       	brcc	.+86     	; 0x6dc <Endpoint_ConfigureEndpoint_Prv+0x5c>
     686:	90 93 e9 00 	sts	0x00E9, r25
     68a:	98 17       	cp	r25, r24
     68c:	39 f0       	breq	.+14     	; 0x69c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     68e:	70 91 ec 00 	lds	r23, 0x00EC
     692:	20 91 ed 00 	lds	r18, 0x00ED
     696:	50 91 f0 00 	lds	r21, 0x00F0
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <Endpoint_ConfigureEndpoint_Prv+0x22>
     69c:	24 2f       	mov	r18, r20
     69e:	76 2f       	mov	r23, r22
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	21 ff       	sbrs	r18, 1
     6a4:	19 c0       	rjmp	.+50     	; 0x6d8 <Endpoint_ConfigureEndpoint_Prv+0x58>
     6a6:	30 91 eb 00 	lds	r19, 0x00EB
     6aa:	3e 7f       	andi	r19, 0xFE	; 254
     6ac:	30 93 eb 00 	sts	0x00EB, r19
     6b0:	30 91 ed 00 	lds	r19, 0x00ED
					  ParserData->TotalReportItems++;
     6b4:	3d 7f       	andi	r19, 0xFD	; 253
     6b6:	30 93 ed 00 	sts	0x00ED, r19
     6ba:	30 91 eb 00 	lds	r19, 0x00EB

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6be:	31 60       	ori	r19, 0x01	; 1
     6c0:	30 93 eb 00 	sts	0x00EB, r19
     6c4:	70 93 ec 00 	sts	0x00EC, r23
     6c8:	20 93 ed 00 	sts	0x00ED, r18
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6cc:	50 93 f0 00 	sts	0x00F0, r21
     6d0:	20 91 ee 00 	lds	r18, 0x00EE
     6d4:	27 ff       	sbrs	r18, 7
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <Endpoint_ConfigureEndpoint_Prv+0x66>
     6d8:	9f 5f       	subi	r25, 0xFF	; 255
     6da:	d3 cf       	rjmp	.-90     	; 0x682 <Endpoint_ConfigureEndpoint_Prv+0x2>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6dc:	8f 70       	andi	r24, 0x0F	; 15
     6de:	80 93 e9 00 	sts	0x00E9, r24
     6e2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	if (!(ParserData->TotalReportItems))
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret

000006ea <Endpoint_ConfigureEndpointTable>:
     6ea:	0f 93       	push	r16
	  return HID_PARSE_NoUnfilteredReportItems;
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f0:	df 93       	push	r29
     6f2:	06 2f       	mov	r16, r22
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6f4:	ec 01       	movw	r28, r24
     6f6:	10 e0       	ldi	r17, 0x00	; 0
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6f8:	10 17       	cp	r17, r16
     6fa:	69 f1       	breq	.+90     	; 0x756 <Endpoint_ConfigureEndpointTable+0x6c>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6fc:	98 81       	ld	r25, Y
     6fe:	99 23       	and	r25, r25

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     700:	39 f1       	breq	.+78     	; 0x750 <Endpoint_ConfigureEndpointTable+0x66>
     702:	2c 81       	ldd	r18, Y+4	; 0x04
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     704:	e9 81       	ldd	r30, Y+1	; 0x01
     706:	fa 81       	ldd	r31, Y+2	; 0x02
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     708:	6b 81       	ldd	r22, Y+3	; 0x03

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     70a:	89 2f       	mov	r24, r25
     70c:	8f 70       	andi	r24, 0x0F	; 15
     70e:	85 30       	cpi	r24, 0x05	; 5
     710:	10 f0       	brcs	.+4      	; 0x716 <Endpoint_ConfigureEndpointTable+0x2c>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	21 c0       	rjmp	.+66     	; 0x758 <Endpoint_ConfigureEndpointTable+0x6e>
     716:	22 30       	cpi	r18, 0x02	; 2
     718:	10 f0       	brcs	.+4      	; 0x71e <Endpoint_ConfigureEndpointTable+0x34>
     71a:	56 e0       	ldi	r21, 0x06	; 6
     71c:	01 c0       	rjmp	.+2      	; 0x720 <Endpoint_ConfigureEndpointTable+0x36>
     71e:	52 e0       	ldi	r21, 0x02	; 2
     720:	28 e0       	ldi	r18, 0x08	; 8
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	2e 17       	cp	r18, r30
     728:	3f 07       	cpc	r19, r31
     72a:	20 f4       	brcc	.+8      	; 0x734 <Endpoint_ConfigureEndpointTable+0x4a>
     72c:	4f 5f       	subi	r20, 0xFF	; 255
     72e:	22 0f       	add	r18, r18
     730:	33 1f       	adc	r19, r19
     732:	f9 cf       	rjmp	.-14     	; 0x726 <Endpoint_ConfigureEndpointTable+0x3c>
     734:	42 95       	swap	r20
     736:	40 7f       	andi	r20, 0xF0	; 240
     738:	45 2b       	or	r20, r21
     73a:	99 1f       	adc	r25, r25
     73c:	99 27       	eor	r25, r25

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     73e:	99 1f       	adc	r25, r25
     740:	62 95       	swap	r22
     742:	66 0f       	add	r22, r22
     744:	66 0f       	add	r22, r22
     746:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     748:	69 2b       	or	r22, r25
     74a:	9a df       	rcall	.-204    	; 0x680 <Endpoint_ConfigureEndpoint_Prv>
     74c:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     74e:	09 f3       	breq	.-62     	; 0x712 <Endpoint_ConfigureEndpointTable+0x28>
     750:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     752:	25 96       	adiw	r28, 0x05	; 5
     754:	d1 cf       	rjmp	.-94     	; 0x6f8 <Endpoint_ConfigureEndpointTable+0xe>
     756:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     758:	df 91       	pop	r29
}
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <Endpoint_ClearStatusStage>:
     762:	80 91 c9 02 	lds	r24, 0x02C9
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     766:	87 fd       	sbrc	r24, 7
     768:	05 c0       	rjmp	.+10     	; 0x774 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     76a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     76e:	80 ff       	sbrs	r24, 0
     770:	0e c0       	rjmp	.+28     	; 0x78e <Endpoint_ClearStatusStage+0x2c>
     772:	12 c0       	rjmp	.+36     	; 0x798 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     774:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     778:	82 fd       	sbrc	r24, 2
     77a:	05 c0       	rjmp	.+10     	; 0x786 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     77c:	80 91 c8 02 	lds	r24, 0x02C8
     780:	81 11       	cpse	r24, r1
     782:	f8 cf       	rjmp	.-16     	; 0x774 <Endpoint_ClearStatusStage+0x12>
     784:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     786:	80 91 e8 00 	lds	r24, 0x00E8
     78a:	8b 77       	andi	r24, 0x7B	; 123
     78c:	08 c0       	rjmp	.+16     	; 0x79e <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     78e:	80 91 c8 02 	lds	r24, 0x02C8
     792:	81 11       	cpse	r24, r1
     794:	ea cf       	rjmp	.-44     	; 0x76a <Endpoint_ClearStatusStage+0x8>
     796:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     798:	80 91 e8 00 	lds	r24, 0x00E8
     79c:	8e 77       	andi	r24, 0x7E	; 126
     79e:	80 93 e8 00 	sts	0x00E8, r24
     7a2:	08 95       	ret

000007a4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7a4:	80 91 e4 00 	lds	r24, 0x00E4
     7a8:	90 91 e5 00 	lds	r25, 0x00E5
     7ac:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7ae:	20 91 ec 00 	lds	r18, 0x00EC
     7b2:	20 ff       	sbrs	r18, 0
     7b4:	21 c0       	rjmp	.+66     	; 0x7f8 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7b6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7ba:	20 fd       	sbrc	r18, 0
     7bc:	21 c0       	rjmp	.+66     	; 0x800 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7be:	20 91 c8 02 	lds	r18, 0x02C8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7c2:	22 23       	and	r18, r18
     7c4:	89 f0       	breq	.+34     	; 0x7e8 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7c6:	25 30       	cpi	r18, 0x05	; 5
     7c8:	89 f0       	breq	.+34     	; 0x7ec <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7ca:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7ce:	25 fd       	sbrc	r18, 5
     7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <Endpoint_WaitUntilReady+0x4c>
     7d2:	20 91 e4 00 	lds	r18, 0x00E4
     7d6:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7da:	28 17       	cp	r18, r24
     7dc:	39 07       	cpc	r19, r25
     7de:	39 f3       	breq	.-50     	; 0x7ae <Endpoint_WaitUntilReady+0xa>
     7e0:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7e2:	41 f0       	breq	.+16     	; 0x7f4 <Endpoint_WaitUntilReady+0x50>
     7e4:	c9 01       	movw	r24, r18
     7e6:	e3 cf       	rjmp	.-58     	; 0x7ae <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7f8:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7fc:	22 ff       	sbrs	r18, 2
     7fe:	df cf       	rjmp	.-66     	; 0x7be <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	08 95       	ret

00000804 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     804:	56 d0       	rcall	.+172    	; 0x8b2 <USB_INT_DisableAllInterrupts>
     806:	58 d0       	rcall	.+176    	; 0x8b8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     808:	e0 ee       	ldi	r30, 0xE0	; 224
     80a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     80c:	80 81       	ld	r24, Z
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	80 83       	st	Z, r24
     812:	e8 ed       	ldi	r30, 0xD8	; 216
     814:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     816:	80 81       	ld	r24, Z
     818:	8f 77       	andi	r24, 0x7F	; 127
     81a:	80 83       	st	Z, r24
     81c:	19 bc       	out	0x29, r1	; 41
     81e:	e3 e6       	ldi	r30, 0x63	; 99
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     820:	f0 e0       	ldi	r31, 0x00	; 0
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
     822:	80 81       	ld	r24, Z
     824:	81 60       	ori	r24, 0x01	; 1
     826:	80 83       	st	Z, r24
     828:	10 92 c7 02 	sts	0x02C7, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     82c:	08 95       	ret

0000082e <USB_ResetInterface>:
     82e:	41 d0       	rcall	.+130    	; 0x8b2 <USB_INT_DisableAllInterrupts>
     830:	43 d0       	rcall	.+134    	; 0x8b8 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     832:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     836:	8f 77       	andi	r24, 0x7F	; 127
     838:	80 93 d8 00 	sts	0x00D8, r24
     83c:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     840:	80 68       	ori	r24, 0x80	; 128
     842:	80 93 d8 00 	sts	0x00D8, r24
     846:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     84a:	8f 7d       	andi	r24, 0xDF	; 223
     84c:	80 93 d8 00 	sts	0x00D8, r24
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     854:	86 e0       	ldi	r24, 0x06	; 6
     856:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     858:	09 b4       	in	r0, 0x29	; 41
     85a:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     85c:	fd cf       	rjmp	.-6      	; 0x858 <USB_ResetInterface+0x2a>
     85e:	10 92 c8 02 	sts	0x02C8, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     862:	10 92 c4 02 	sts	0x02C4, r1
	USB_Device_ConfigurationNumber  = 0;
     866:	10 92 c6 02 	sts	0x02C6, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     86a:	10 92 c5 02 	sts	0x02C5, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     86e:	42 e0       	ldi	r20, 0x02	; 2
     870:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	05 df       	rcall	.-502    	; 0x680 <Endpoint_ConfigureEndpoint_Prv>
     876:	80 91 e1 00 	lds	r24, 0x00E1
     87a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     87c:	80 93 e1 00 	sts	0x00E1, r24
     880:	80 91 e2 00 	lds	r24, 0x00E2
     884:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     886:	80 93 e2 00 	sts	0x00E2, r24
     88a:	80 91 e2 00 	lds	r24, 0x00E2
     88e:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     890:	80 93 e2 00 	sts	0x00E2, r24
     894:	80 91 e0 00 	lds	r24, 0x00E0
     898:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     89a:	80 93 e0 00 	sts	0x00E0, r24
     89e:	08 95       	ret

000008a0 <USB_Init>:
     8a0:	e3 e6       	ldi	r30, 0x63	; 99
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     8a6:	8e 7f       	andi	r24, 0xFE	; 254
     8a8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 c7 02 	sts	0x02C7, r24

	USB_ResetInterface();
     8b0:	be cf       	rjmp	.-132    	; 0x82e <USB_ResetInterface>

000008b2 <USB_INT_DisableAllInterrupts>:
     8b2:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8b6:	08 95       	ret

000008b8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8b8:	10 92 e1 00 	sts	0x00E1, r1
     8bc:	08 95       	ret

000008be <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	0f 92       	push	r0
     8c6:	11 24       	eor	r1, r1
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	4f 93       	push	r20
     8ce:	5f 93       	push	r21
     8d0:	6f 93       	push	r22
     8d2:	7f 93       	push	r23
     8d4:	8f 93       	push	r24
     8d6:	9f 93       	push	r25
     8d8:	af 93       	push	r26
     8da:	bf 93       	push	r27
     8dc:	ef 93       	push	r30
     8de:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8e0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8e4:	82 ff       	sbrs	r24, 2
     8e6:	0a c0       	rjmp	.+20     	; 0x8fc <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8e8:	80 91 e2 00 	lds	r24, 0x00E2
     8ec:	82 ff       	sbrs	r24, 2
     8ee:	06 c0       	rjmp	.+12     	; 0x8fc <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8f0:	80 91 e1 00 	lds	r24, 0x00E1
     8f4:	8b 7f       	andi	r24, 0xFB	; 251
     8f6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8fa:	0a d2       	rcall	.+1044   	; 0xd10 <USB_Event_Stub>
     8fc:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     900:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     902:	17 c0       	rjmp	.+46     	; 0x932 <__vector_11+0x74>
     904:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     908:	80 ff       	sbrs	r24, 0
     90a:	13 c0       	rjmp	.+38     	; 0x932 <__vector_11+0x74>
     90c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     910:	8e 7f       	andi	r24, 0xFE	; 254
     912:	80 93 e2 00 	sts	0x00E2, r24
     916:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     91a:	80 61       	ori	r24, 0x10	; 16
     91c:	80 93 e2 00 	sts	0x00E2, r24
     920:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     924:	80 62       	ori	r24, 0x20	; 32
     926:	80 93 d8 00 	sts	0x00D8, r24
     92a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     92c:	10 92 c8 02 	sts	0x02C8, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     930:	93 dc       	rcall	.-1754   	; 0x258 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     932:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     936:	84 ff       	sbrs	r24, 4
     938:	2f c0       	rjmp	.+94     	; 0x998 <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     93a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     93e:	84 ff       	sbrs	r24, 4
     940:	2b c0       	rjmp	.+86     	; 0x998 <__vector_11+0xda>
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     946:	86 e0       	ldi	r24, 0x06	; 6
     948:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     94a:	09 b4       	in	r0, 0x29	; 41
     94c:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     94e:	fd cf       	rjmp	.-6      	; 0x94a <__vector_11+0x8c>
     950:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     954:	8f 7d       	andi	r24, 0xDF	; 223
     956:	80 93 d8 00 	sts	0x00D8, r24
     95a:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     95e:	8f 7e       	andi	r24, 0xEF	; 239
     960:	80 93 e1 00 	sts	0x00E1, r24
     964:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     968:	8f 7e       	andi	r24, 0xEF	; 239
     96a:	80 93 e2 00 	sts	0x00E2, r24
     96e:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     972:	81 60       	ori	r24, 0x01	; 1
     974:	80 93 e2 00 	sts	0x00E2, r24
     978:	80 91 c4 02 	lds	r24, 0x02C4
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     97c:	88 23       	and	r24, r24
     97e:	11 f0       	breq	.+4      	; 0x984 <__vector_11+0xc6>
     980:	84 e0       	ldi	r24, 0x04	; 4
     982:	07 c0       	rjmp	.+14     	; 0x992 <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     984:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     988:	87 ff       	sbrs	r24, 7
     98a:	02 c0       	rjmp	.+4      	; 0x990 <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	01 c0       	rjmp	.+2      	; 0x992 <__vector_11+0xd4>
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 93 c8 02 	sts	0x02C8, r24
     996:	5f dc       	rcall	.-1858   	; 0x256 <EVENT_USB_Device_Connect>
     998:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     99c:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     99e:	27 c0       	rjmp	.+78     	; 0x9ee <__vector_11+0x130>
     9a0:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9a4:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9a6:	23 c0       	rjmp	.+70     	; 0x9ee <__vector_11+0x130>
     9a8:	80 91 e1 00 	lds	r24, 0x00E1
     9ac:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9ae:	80 93 e1 00 	sts	0x00E1, r24
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	80 93 c8 02 	sts	0x02C8, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9b8:	10 92 c4 02 	sts	0x02C4, r1
     9bc:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     9c0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9c2:	80 93 e1 00 	sts	0x00E1, r24
     9c6:	80 91 e2 00 	lds	r24, 0x00E2
     9ca:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9cc:	80 93 e2 00 	sts	0x00E2, r24
     9d0:	80 91 e2 00 	lds	r24, 0x00E2
     9d4:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9d6:	80 93 e2 00 	sts	0x00E2, r24
     9da:	42 e0       	ldi	r20, 0x02	; 2
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9e0:	4f de       	rcall	.-866    	; 0x680 <Endpoint_ConfigureEndpoint_Prv>
     9e2:	80 91 f0 00 	lds	r24, 0x00F0
     9e6:	88 60       	ori	r24, 0x08	; 8
     9e8:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9ec:	91 d1       	rcall	.+802    	; 0xd10 <USB_Event_Stub>
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9f4:	af 91       	pop	r26
     9f6:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9f8:	8f 91       	pop	r24
     9fa:	7f 91       	pop	r23
     9fc:	6f 91       	pop	r22
     9fe:	5f 91       	pop	r21
     a00:	4f 91       	pop	r20
     a02:	3f 91       	pop	r19
     a04:	2f 91       	pop	r18
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <__vector_12>:
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	cf 93       	push	r28
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a34:	c0 91 e9 00 	lds	r28, 0x00E9
     a38:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a3a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a3e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a42:	80 91 f0 00 	lds	r24, 0x00F0
     a46:	87 7f       	andi	r24, 0xF7	; 247
     a48:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a4c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a4e:	1b d0       	rcall	.+54     	; 0xa86 <USB_Device_ProcessControlRequest>
     a50:	10 92 e9 00 	sts	0x00E9, r1
     a54:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a58:	88 60       	ori	r24, 0x08	; 8
     a5a:	80 93 f0 00 	sts	0x00F0, r24
     a5e:	c0 93 e9 00 	sts	0x00E9, r28
     a62:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a64:	ef 91       	pop	r30
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <USB_Device_ProcessControlRequest>:
     a86:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	aa 97       	sbiw	r28, 0x2a	; 42
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	e9 ec       	ldi	r30, 0xC9	; 201
     a9e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     aa0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     aa4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     aa6:	22 e0       	ldi	r18, 0x02	; 2
     aa8:	e1 3d       	cpi	r30, 0xD1	; 209
     aaa:	f2 07       	cpc	r31, r18
     aac:	c9 f7       	brne	.-14     	; 0xaa0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     aae:	d8 db       	rcall	.-2128   	; 0x260 <EVENT_USB_Device_ControlRequest>
     ab0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ab4:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     ab6:	14 c1       	rjmp	.+552    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     ab8:	20 91 c9 02 	lds	r18, 0x02C9
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     abc:	30 91 ca 02 	lds	r19, 0x02CA

		switch (USB_ControlRequest.bRequest)
     ac0:	83 2f       	mov	r24, r19
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8a 30       	cpi	r24, 0x0A	; 10
     ac6:	91 05       	cpc	r25, r1
     ac8:	08 f0       	brcs	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x46>
     aca:	0a c1       	rjmp	.+532    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     acc:	fc 01       	movw	r30, r24
     ace:	e6 5c       	subi	r30, 0xC6	; 198
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	d1 c2       	rjmp	.+1442   	; 0x1076 <__tablejump2__>
     ad4:	20 38       	cpi	r18, 0x80	; 128
     ad6:	81 f0       	breq	.+32     	; 0xaf8 <USB_Device_ProcessControlRequest+0x72>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ad8:	22 38       	cpi	r18, 0x82	; 130
     ada:	09 f0       	breq	.+2      	; 0xade <USB_Device_ProcessControlRequest+0x58>
     adc:	01 c1       	rjmp	.+514    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     ade:	80 91 cd 02 	lds	r24, 0x02CD
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	80 93 e9 00 	sts	0x00E9, r24
     ae8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     aec:	85 fb       	bst	r24, 5
     aee:	88 27       	eor	r24, r24
     af0:	80 f9       	bld	r24, 0
     af2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <USB_Device_ProcessControlRequest+0x7e>
     af8:	80 91 c5 02 	lds	r24, 0x02C5
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     afc:	90 91 c6 02 	lds	r25, 0x02C6
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b00:	91 11       	cpse	r25, r1
     b02:	82 60       	ori	r24, 0x02	; 2
     b04:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b08:	97 7f       	andi	r25, 0xF7	; 247
     b0a:	90 93 e8 00 	sts	0x00E8, r25
     b0e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b12:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b16:	c1 c0       	rjmp	.+386    	; 0xc9a <USB_Device_ProcessControlRequest+0x214>
     b18:	82 2f       	mov	r24, r18
     b1a:	8d 7f       	andi	r24, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b1c:	09 f0       	breq	.+2      	; 0xb20 <USB_Device_ProcessControlRequest+0x9a>
     b1e:	e0 c0       	rjmp	.+448    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     b20:	22 23       	and	r18, r18
     b22:	19 f0       	breq	.+6      	; 0xb2a <USB_Device_ProcessControlRequest+0xa4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b24:	22 30       	cpi	r18, 0x02	; 2
     b26:	61 f0       	breq	.+24     	; 0xb40 <USB_Device_ProcessControlRequest+0xba>
     b28:	db c0       	rjmp	.+438    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     b2a:	80 91 cb 02 	lds	r24, 0x02CB
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	09 f0       	breq	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0xae>
     b32:	d6 c0       	rjmp	.+428    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     b34:	33 30       	cpi	r19, 0x03	; 3
     b36:	09 f0       	breq	.+2      	; 0xb3a <USB_Device_ProcessControlRequest+0xb4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	80 93 c6 02 	sts	0x02C6, r24
     b3e:	28 c0       	rjmp	.+80     	; 0xb90 <USB_Device_ProcessControlRequest+0x10a>
     b40:	80 91 cb 02 	lds	r24, 0x02CB

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b44:	81 11       	cpse	r24, r1
     b46:	24 c0       	rjmp	.+72     	; 0xb90 <USB_Device_ProcessControlRequest+0x10a>
     b48:	20 91 cd 02 	lds	r18, 0x02CD
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b4c:	2f 70       	andi	r18, 0x0F	; 15
     b4e:	09 f4       	brne	.+2      	; 0xb52 <USB_Device_ProcessControlRequest+0xcc>
     b50:	c7 c0       	rjmp	.+398    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b52:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b56:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b5a:	80 ff       	sbrs	r24, 0
     b5c:	19 c0       	rjmp	.+50     	; 0xb90 <USB_Device_ProcessControlRequest+0x10a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b5e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b62:	33 30       	cpi	r19, 0x03	; 3
     b64:	11 f4       	brne	.+4      	; 0xb6a <USB_Device_ProcessControlRequest+0xe4>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b66:	80 62       	ori	r24, 0x20	; 32
     b68:	11 c0       	rjmp	.+34     	; 0xb8c <USB_Device_ProcessControlRequest+0x106>
     b6a:	80 61       	ori	r24, 0x10	; 16
     b6c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b74:	02 2e       	mov	r0, r18
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <USB_Device_ProcessControlRequest+0xf4>
     b78:	88 0f       	add	r24, r24
     b7a:	0a 94       	dec	r0
     b7c:	ea f7       	brpl	.-6      	; 0xb78 <USB_Device_ProcessControlRequest+0xf2>
     b7e:	80 93 ea 00 	sts	0x00EA, r24
     b82:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b86:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b8a:	88 60       	ori	r24, 0x08	; 8
     b8c:	80 93 eb 00 	sts	0x00EB, r24
     b90:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b94:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b98:	87 7f       	andi	r24, 0xF7	; 247
     b9a:	82 c0       	rjmp	.+260    	; 0xca0 <USB_Device_ProcessControlRequest+0x21a>
     b9c:	21 11       	cpse	r18, r1
     b9e:	a0 c0       	rjmp	.+320    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ba0:	10 91 cb 02 	lds	r17, 0x02CB
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ba4:	1f 77       	andi	r17, 0x7F	; 127
     ba6:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     baa:	80 78       	andi	r24, 0x80	; 128
     bac:	81 2b       	or	r24, r17
     bae:	80 93 e3 00 	sts	0x00E3, r24
     bb2:	80 91 e8 00 	lds	r24, 0x00E8
     bb6:	87 7f       	andi	r24, 0xF7	; 247
     bb8:	80 93 e8 00 	sts	0x00E8, r24
     bbc:	d2 dd       	rcall	.-1116   	; 0x762 <Endpoint_ClearStatusStage>
     bbe:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bc2:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bc4:	fc cf       	rjmp	.-8      	; 0xbbe <USB_Device_ProcessControlRequest+0x138>
     bc6:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     bca:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     bcc:	80 93 e3 00 	sts	0x00E3, r24
     bd0:	11 23       	and	r17, r17
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <USB_Device_ProcessControlRequest+0x152>
     bd4:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <USB_Device_ProcessControlRequest+0x154>
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	80 93 c8 02 	sts	0x02C8, r24
     bde:	80 c0       	rjmp	.+256    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     be0:	20 58       	subi	r18, 0x80	; 128
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	08 f0       	brcs	.+2      	; 0xbe8 <USB_Device_ProcessControlRequest+0x162>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     be6:	7c c0       	rjmp	.+248    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     be8:	80 91 cb 02 	lds	r24, 0x02CB
     bec:	90 91 cc 02 	lds	r25, 0x02CC
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bf0:	8c 3d       	cpi	r24, 0xDC	; 220
     bf2:	23 e0       	ldi	r18, 0x03	; 3
     bf4:	92 07       	cpc	r25, r18
     bf6:	71 f5       	brne	.+92     	; 0xc54 <USB_Device_ProcessControlRequest+0x1ce>
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	8a 83       	std	Y+2, r24	; 0x02
     bfc:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c02:	f8 94       	cli
     c04:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c06:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c08:	20 e0       	ldi	r18, 0x00	; 0
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c0a:	3e e0       	ldi	r19, 0x0E	; 14
     c0c:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c0e:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c10:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c12:	50 93 57 00 	sts	0x0057, r21
     c16:	e4 91       	lpm	r30, Z
     c18:	20 ff       	sbrs	r18, 0
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <USB_Device_ProcessControlRequest+0x19c>
     c1c:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     c1e:	ef 70       	andi	r30, 0x0F	; 15
     c20:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     c22:	ef 70       	andi	r30, 0x0F	; 15
     c24:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     c26:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     c28:	ea 30       	cpi	r30, 0x0A	; 10
     c2a:	10 f0       	brcs	.+4      	; 0xc30 <USB_Device_ProcessControlRequest+0x1aa>
     c2c:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <USB_Device_ProcessControlRequest+0x1ac>
     c30:	c0 96       	adiw	r24, 0x30	; 48
     c32:	8d 93       	st	X+, r24
     c34:	9d 93       	st	X+, r25
     c36:	2f 5f       	subi	r18, 0xFF	; 255
     c38:	24 31       	cpi	r18, 0x14	; 20
     c3a:	49 f7       	brne	.-46     	; 0xc0e <USB_Device_ProcessControlRequest+0x188>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c3c:	4f bf       	out	0x3f, r20	; 63
     c3e:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c42:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c44:	80 93 e8 00 	sts	0x00E8, r24
     c48:	6a e2       	ldi	r22, 0x2A	; 42
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	58 dc       	rcall	.-1872   	; 0x502 <Endpoint_Write_Control_Stream_LE>
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <USB_Device_ProcessControlRequest+0x1f2>
     c54:	ae 01       	movw	r20, r28
     c56:	4f 5f       	subi	r20, 0xFF	; 255
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	60 91 cd 02 	lds	r22, 0x02CD
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c5e:	03 db       	rcall	.-2554   	; 0x266 <CALLBACK_USB_GetDescriptor>
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	09 f4       	brne	.+2      	; 0xc66 <USB_Device_ProcessControlRequest+0x1e0>
     c64:	3d c0       	rjmp	.+122    	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     c66:	20 91 e8 00 	lds	r18, 0x00E8
     c6a:	27 7f       	andi	r18, 0xF7	; 247
     c6c:	20 93 e8 00 	sts	0x00E8, r18
     c70:	bc 01       	movw	r22, r24
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	a4 dc       	rcall	.-1720   	; 0x5c0 <Endpoint_Write_Control_PStream_LE>
     c78:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c7c:	8b 77       	andi	r24, 0x7B	; 123
     c7e:	80 93 e8 00 	sts	0x00E8, r24
     c82:	2e c0       	rjmp	.+92     	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c84:	20 38       	cpi	r18, 0x80	; 128
     c86:	61 f5       	brne	.+88     	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     c88:	80 91 e8 00 	lds	r24, 0x00E8
     c8c:	87 7f       	andi	r24, 0xF7	; 247
     c8e:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c92:	80 91 c4 02 	lds	r24, 0x02C4
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c96:	80 93 f1 00 	sts	0x00F1, r24
     c9a:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c9e:	8e 77       	andi	r24, 0x7E	; 126
     ca0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ca4:	5e dd       	rcall	.-1348   	; 0x762 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ca6:	1c c0       	rjmp	.+56     	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     ca8:	21 11       	cpse	r18, r1
     caa:	1a c0       	rjmp	.+52     	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     cac:	90 91 cb 02 	lds	r25, 0x02CB
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     cb0:	92 30       	cpi	r25, 0x02	; 2
     cb2:	b0 f4       	brcc	.+44     	; 0xce0 <USB_Device_ProcessControlRequest+0x25a>
     cb4:	80 91 e8 00 	lds	r24, 0x00E8
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cb8:	87 7f       	andi	r24, 0xF7	; 247
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cba:	80 93 e8 00 	sts	0x00E8, r24
     cbe:	90 93 c4 02 	sts	0x02C4, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc2:	4f dd       	rcall	.-1378   	; 0x762 <Endpoint_ClearStatusStage>
     cc4:	80 91 c4 02 	lds	r24, 0x02C4
     cc8:	81 11       	cpse	r24, r1
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <USB_Device_ProcessControlRequest+0x24e>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ccc:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     cd0:	87 ff       	sbrs	r24, 7
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <USB_Device_ProcessControlRequest+0x252>

	if (USB_Device_ConfigurationNumber)
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <USB_Device_ProcessControlRequest+0x254>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 c8 02 	sts	0x02C8, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cde:	bd da       	rcall	.-2694   	; 0x25a <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ce0:	80 91 e8 00 	lds	r24, 0x00E8
     ce4:	83 ff       	sbrs	r24, 3
     ce6:	0a c0       	rjmp	.+20     	; 0xcfc <USB_Device_ProcessControlRequest+0x276>
     ce8:	80 91 e8 00 	lds	r24, 0x00E8
     cec:	87 7f       	andi	r24, 0xF7	; 247

	EVENT_USB_Device_ConfigurationChanged();
     cee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cf2:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cfc:	aa 96       	adiw	r28, 0x2a	; 42
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d0e:	08 95       	ret

00000d10 <USB_Event_Stub>:
     d10:	08 95       	ret

00000d12 <USB_USBTask>:
     d12:	cf 93       	push	r28
     d14:	80 91 c8 02 	lds	r24, 0x02C8
     d18:	88 23       	and	r24, r24
     d1a:	a9 f0       	breq	.+42     	; 0xd46 <USB_USBTask+0x34>
     d1c:	80 91 e9 00 	lds	r24, 0x00E9
     d20:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d22:	90 91 ec 00 	lds	r25, 0x00EC
     d26:	90 ff       	sbrs	r25, 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <USB_USBTask+0x1c>
     d2a:	90 e8       	ldi	r25, 0x80	; 128
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <USB_USBTask+0x1e>
     d2e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d30:	c9 2f       	mov	r28, r25
     d32:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d34:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d38:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d3c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d3e:	a3 de       	rcall	.-698    	; 0xa86 <USB_Device_ProcessControlRequest>
     d40:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d42:	c0 93 e9 00 	sts	0x00E9, r28
     d46:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d48:	08 95       	ret

00000d4a <CDC_Device_ConfigureEndpoints>:
     d4a:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d4c:	df 93       	push	r29
     d4e:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     d50:	fc 01       	movw	r30, r24
     d52:	70 96       	adiw	r30, 0x10	; 16
     d54:	8b e0       	ldi	r24, 0x0B	; 11
     d56:	df 01       	movw	r26, r30
     d58:	1d 92       	st	X+, r1
     d5a:	8a 95       	dec	r24
     d5c:	e9 f7       	brne	.-6      	; 0xd58 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     d62:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	bd dc       	rcall	.-1670   	; 0x6ea <Endpoint_ConfigureEndpointTable>
     d70:	88 23       	and	r24, r24
     d72:	61 f0       	breq	.+24     	; 0xd8c <CDC_Device_ConfigureEndpoints+0x42>
     d74:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     d76:	ce 01       	movw	r24, r28
     d78:	06 96       	adiw	r24, 0x06	; 6
     d7a:	b7 dc       	rcall	.-1682   	; 0x6ea <Endpoint_ConfigureEndpointTable>
     d7c:	88 23       	and	r24, r24
     d7e:	31 f0       	breq	.+12     	; 0xd8c <CDC_Device_ConfigureEndpoints+0x42>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     d84:	0b 96       	adiw	r24, 0x0b	; 11
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
	  return false;

	return true;
}
     d8a:	af cc       	rjmp	.-1698   	; 0x6ea <Endpoint_ConfigureEndpointTable>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
	  return false;

	return true;
}
     d92:	08 95       	ret

00000d94 <CDC_Device_SendByte>:
     d94:	cf 93       	push	r28
     d96:	c6 2f       	mov	r28, r22
     d98:	20 91 c8 02 	lds	r18, 0x02C8
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d9c:	24 30       	cpi	r18, 0x04	; 4
     d9e:	f1 f4       	brne	.+60     	; 0xddc <CDC_Device_SendByte+0x48>
     da0:	fc 01       	movw	r30, r24
     da2:	44 89       	ldd	r20, Z+20	; 0x14
     da4:	55 89       	ldd	r21, Z+21	; 0x15
     da6:	66 89       	ldd	r22, Z+22	; 0x16
     da8:	77 89       	ldd	r23, Z+23	; 0x17
     daa:	45 2b       	or	r20, r21
     dac:	46 2b       	or	r20, r22
     dae:	47 2b       	or	r20, r23
     db0:	a9 f0       	breq	.+42     	; 0xddc <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	8f 70       	andi	r24, 0x0F	; 15
     db6:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dba:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     dbe:	85 ff       	sbrs	r24, 5
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dc2:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dca:	80 91 e8 00 	lds	r24, 0x00E8
     dce:	8e 77       	andi	r24, 0x7E	; 126
     dd0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     dd4:	e7 dc       	rcall	.-1586   	; 0x7a4 <Endpoint_WaitUntilReady>
     dd6:	88 23       	and	r24, r24
     dd8:	a1 f3       	breq	.-24     	; 0xdc2 <CDC_Device_SendByte+0x2e>
     dda:	01 c0       	rjmp	.+2      	; 0xdde <CDC_Device_SendByte+0x4a>
     ddc:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     dde:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     de0:	08 95       	ret

00000de2 <CDC_Device_putchar>:
     de2:	fb 01       	movw	r30, r22
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     de4:	68 2f       	mov	r22, r24
     de6:	84 85       	ldd	r24, Z+12	; 0x0c
     de8:	95 85       	ldd	r25, Z+13	; 0x0d
     dea:	d4 df       	rcall	.-88     	; 0xd94 <CDC_Device_SendByte>
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 11       	cpse	r24, r1
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <CDC_Device_putchar+0x16>
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	88 27       	eor	r24, r24
}
     dfa:	99 27       	eor	r25, r25
     dfc:	82 1b       	sub	r24, r18
     dfe:	93 0b       	sbc	r25, r19
     e00:	08 95       	ret

00000e02 <CDC_Device_Flush>:
     e02:	20 91 c8 02 	lds	r18, 0x02C8
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e06:	24 30       	cpi	r18, 0x04	; 4
     e08:	21 f5       	brne	.+72     	; 0xe52 <CDC_Device_Flush+0x50>
     e0a:	fc 01       	movw	r30, r24
     e0c:	44 89       	ldd	r20, Z+20	; 0x14
     e0e:	55 89       	ldd	r21, Z+21	; 0x15
     e10:	66 89       	ldd	r22, Z+22	; 0x16
     e12:	77 89       	ldd	r23, Z+23	; 0x17
     e14:	45 2b       	or	r20, r21
     e16:	46 2b       	or	r20, r22
     e18:	47 2b       	or	r20, r23
     e1a:	d9 f0       	breq	.+54     	; 0xe52 <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e1c:	81 81       	ldd	r24, Z+1	; 0x01
     e1e:	8f 70       	andi	r24, 0x0F	; 15
     e20:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e24:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     e28:	88 23       	and	r24, r24
     e2a:	89 f0       	breq	.+34     	; 0xe4e <CDC_Device_Flush+0x4c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e2c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e30:	80 91 e8 00 	lds	r24, 0x00E8
     e34:	8e 77       	andi	r24, 0x7E	; 126
     e36:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e3a:	95 fd       	sbrc	r25, 5
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <CDC_Device_Flush+0x4c>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e3e:	b2 dc       	rcall	.-1692   	; 0x7a4 <Endpoint_WaitUntilReady>
     e40:	81 11       	cpse	r24, r1
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <CDC_Device_Flush+0x52>
     e44:	80 91 e8 00 	lds	r24, 0x00E8
     e48:	8e 77       	andi	r24, 0x7E	; 126
     e4a:	80 93 e8 00 	sts	0x00E8, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	08 95       	ret
     e52:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     e54:	08 95       	ret

00000e56 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e56:	20 91 c8 02 	lds	r18, 0x02C8
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e5a:	24 30       	cpi	r18, 0x04	; 4
     e5c:	89 f4       	brne	.+34     	; 0xe80 <CDC_Device_USBTask+0x2a>
     e5e:	fc 01       	movw	r30, r24
     e60:	44 89       	ldd	r20, Z+20	; 0x14
     e62:	55 89       	ldd	r21, Z+21	; 0x15
     e64:	66 89       	ldd	r22, Z+22	; 0x16
     e66:	77 89       	ldd	r23, Z+23	; 0x17
     e68:	45 2b       	or	r20, r21
     e6a:	46 2b       	or	r20, r22
     e6c:	47 2b       	or	r20, r23
     e6e:	41 f0       	breq	.+16     	; 0xe80 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e70:	21 81       	ldd	r18, Z+1	; 0x01
     e72:	2f 70       	andi	r18, 0x0F	; 15
     e74:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e78:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     e7c:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     e7e:	c1 cf       	rjmp	.-126    	; 0xe02 <CDC_Device_Flush>
     e80:	08 95       	ret

00000e82 <CDC_Device_ReceiveByte>:
     e82:	20 91 c8 02 	lds	r18, 0x02C8
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e86:	24 30       	cpi	r18, 0x04	; 4
     e88:	19 f0       	breq	.+6      	; 0xe90 <CDC_Device_ReceiveByte+0xe>
	  return -1;
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	9f ef       	ldi	r25, 0xFF	; 255
     e8e:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e90:	fc 01       	movw	r30, r24
     e92:	44 89       	ldd	r20, Z+20	; 0x14
     e94:	55 89       	ldd	r21, Z+21	; 0x15
     e96:	66 89       	ldd	r22, Z+22	; 0x16
     e98:	77 89       	ldd	r23, Z+23	; 0x17
     e9a:	45 2b       	or	r20, r21
     e9c:	46 2b       	or	r20, r22
     e9e:	47 2b       	or	r20, r23
     ea0:	a1 f3       	breq	.-24     	; 0xe8a <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ea2:	86 81       	ldd	r24, Z+6	; 0x06
     ea4:	8f 70       	andi	r24, 0x0F	; 15
     ea6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eaa:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     eae:	82 ff       	sbrs	r24, 2
     eb0:	ec cf       	rjmp	.-40     	; 0xe8a <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     eb2:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     eb6:	88 23       	and	r24, r24
     eb8:	21 f0       	breq	.+8      	; 0xec2 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eba:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     ec2:	2f ef       	ldi	r18, 0xFF	; 255
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ec6:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     eca:	81 11       	cpse	r24, r1
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ece:	80 91 e8 00 	lds	r24, 0x00E8
     ed2:	8b 77       	andi	r24, 0x7B	; 123
     ed4:	80 93 e8 00 	sts	0x00E8, r24
     ed8:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     eda:	08 95       	ret

00000edc <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     edc:	fc 01       	movw	r30, r24
     ede:	84 85       	ldd	r24, Z+12	; 0x0c
     ee0:	95 85       	ldd	r25, Z+13	; 0x0d
     ee2:	cf df       	rcall	.-98     	; 0xe82 <CDC_Device_ReceiveByte>
     ee4:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <CDC_Device_getchar+0x10>
     ee8:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
     eea:	9f ef       	ldi	r25, 0xFF	; 255
     eec:	08 95       	ret

00000eee <CDC_Device_CreateStream>:

	return ReceivedByte;
}
     eee:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
     ef0:	2e e0       	ldi	r18, 0x0E	; 14
     ef2:	db 01       	movw	r26, r22
     ef4:	1d 92       	st	X+, r1
     ef6:	2a 95       	dec	r18
     ef8:	e9 f7       	brne	.-6      	; 0xef4 <CDC_Device_CreateStream+0x6>
     efa:	23 e0       	ldi	r18, 0x03	; 3
     efc:	23 83       	std	Z+3, r18	; 0x03
     efe:	21 ef       	ldi	r18, 0xF1	; 241
     f00:	36 e0       	ldi	r19, 0x06	; 6
     f02:	31 87       	std	Z+9, r19	; 0x09
     f04:	20 87       	std	Z+8, r18	; 0x08
     f06:	2e e6       	ldi	r18, 0x6E	; 110
     f08:	37 e0       	ldi	r19, 0x07	; 7
     f0a:	33 87       	std	Z+11, r19	; 0x0b
     f0c:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     f0e:	95 87       	std	Z+13, r25	; 0x0d
     f10:	84 87       	std	Z+12, r24	; 0x0c
     f12:	08 95       	ret

00000f14 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     f14:	08 95       	ret

00000f16 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f20:	83 ff       	sbrs	r24, 3
     f22:	a6 c0       	rjmp	.+332    	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f24:	88 81       	ld	r24, Y
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	20 91 cd 02 	lds	r18, 0x02CD
     f2c:	30 91 ce 02 	lds	r19, 0x02CE
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	09 f0       	breq	.+2      	; 0xf38 <CDC_Device_ProcessControlRequest+0x22>
     f36:	9c c0       	rjmp	.+312    	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     f38:	80 91 ca 02 	lds	r24, 0x02CA
     f3c:	81 32       	cpi	r24, 0x21	; 33
     f3e:	61 f0       	breq	.+24     	; 0xf58 <CDC_Device_ProcessControlRequest+0x42>
     f40:	20 f4       	brcc	.+8      	; 0xf4a <CDC_Device_ProcessControlRequest+0x34>
     f42:	80 32       	cpi	r24, 0x20	; 32
     f44:	09 f4       	brne	.+2      	; 0xf48 <CDC_Device_ProcessControlRequest+0x32>
     f46:	3e c0       	rjmp	.+124    	; 0xfc4 <CDC_Device_ProcessControlRequest+0xae>
     f48:	93 c0       	rjmp	.+294    	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
     f4a:	82 32       	cpi	r24, 0x22	; 34
     f4c:	09 f4       	brne	.+2      	; 0xf50 <CDC_Device_ProcessControlRequest+0x3a>
     f4e:	6c c0       	rjmp	.+216    	; 0x1028 <CDC_Device_ProcessControlRequest+0x112>
     f50:	83 32       	cpi	r24, 0x23	; 35
     f52:	09 f4       	brne	.+2      	; 0xf56 <CDC_Device_ProcessControlRequest+0x40>
     f54:	7d c0       	rjmp	.+250    	; 0x1050 <CDC_Device_ProcessControlRequest+0x13a>
     f56:	8c c0       	rjmp	.+280    	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f58:	80 91 c9 02 	lds	r24, 0x02C9
     f5c:	81 3a       	cpi	r24, 0xA1	; 161
     f5e:	09 f0       	breq	.+2      	; 0xf62 <CDC_Device_ProcessControlRequest+0x4c>
     f60:	87 c0       	rjmp	.+270    	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f62:	80 91 e8 00 	lds	r24, 0x00E8
     f66:	87 7f       	andi	r24, 0xF7	; 247
     f68:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f6c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     f70:	80 ff       	sbrs	r24, 0
     f72:	fc cf       	rjmp	.-8      	; 0xf6c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f74:	4c 89       	ldd	r20, Y+20	; 0x14
     f76:	5d 89       	ldd	r21, Y+21	; 0x15
     f78:	6e 89       	ldd	r22, Y+22	; 0x16
     f7a:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f7c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     f80:	bb 27       	eor	r27, r27
     f82:	a7 2f       	mov	r26, r23
     f84:	96 2f       	mov	r25, r22
     f86:	85 2f       	mov	r24, r21
     f88:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     f8c:	cb 01       	movw	r24, r22
     f8e:	aa 27       	eor	r26, r26
     f90:	bb 27       	eor	r27, r27
     f92:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     f96:	47 2f       	mov	r20, r23
     f98:	55 27       	eor	r21, r21
     f9a:	66 27       	eor	r22, r22
     f9c:	77 27       	eor	r23, r23
     f9e:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     fa2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fa4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     fa8:	89 8d       	ldd	r24, Y+25	; 0x19
     faa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     fae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb4:	80 91 e8 00 	lds	r24, 0x00E8
     fb8:	8e 77       	andi	r24, 0x7E	; 126
     fba:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     fc2:	cf cb       	rjmp	.-2146   	; 0x762 <Endpoint_ClearStatusStage>
     fc4:	80 91 c9 02 	lds	r24, 0x02C9
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fc8:	81 32       	cpi	r24, 0x21	; 33
     fca:	09 f0       	breq	.+2      	; 0xfce <CDC_Device_ProcessControlRequest+0xb8>
     fcc:	51 c0       	rjmp	.+162    	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
     fce:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	80 93 e8 00 	sts	0x00E8, r24
     fd8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fdc:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     fde:	05 c0       	rjmp	.+10     	; 0xfea <CDC_Device_ProcessControlRequest+0xd4>
     fe0:	80 91 c8 02 	lds	r24, 0x02C8
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     fe4:	81 11       	cpse	r24, r1
     fe6:	f8 cf       	rjmp	.-16     	; 0xfd8 <CDC_Device_ProcessControlRequest+0xc2>
     fe8:	43 c0       	rjmp	.+134    	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
     fea:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     fee:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     ff2:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     ff6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     ffa:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     ffc:	2d 8b       	std	Y+21, r18	; 0x15
     ffe:	9e 8b       	std	Y+22, r25	; 0x16
    1000:	8f 8b       	std	Y+23, r24	; 0x17
    1002:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1006:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1008:	80 91 f1 00 	lds	r24, 0x00F1
    100c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    100e:	80 91 f1 00 	lds	r24, 0x00F1
    1012:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1014:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1018:	8b 77       	andi	r24, 0x7B	; 123
    101a:	80 93 e8 00 	sts	0x00E8, r24
    101e:	a1 db       	rcall	.-2238   	; 0x762 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1020:	ce 01       	movw	r24, r28
    1022:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1024:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1026:	76 cf       	rjmp	.-276    	; 0xf14 <CDC_Device_Event_Stub>
    1028:	80 91 c9 02 	lds	r24, 0x02C9
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    102c:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    102e:	01 f5       	brne	.+64     	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
    1030:	80 91 e8 00 	lds	r24, 0x00E8
    1034:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1036:	80 93 e8 00 	sts	0x00E8, r24
    103a:	93 db       	rcall	.-2266   	; 0x762 <Endpoint_ClearStatusStage>
    103c:	80 91 cb 02 	lds	r24, 0x02CB
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1040:	90 91 cc 02 	lds	r25, 0x02CC

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1044:	99 8b       	std	Y+17, r25	; 0x11
    1046:	88 8b       	std	Y+16, r24	; 0x10
    1048:	ce 01       	movw	r24, r28
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	62 cf       	rjmp	.-316    	; 0xf14 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1050:	80 91 c9 02 	lds	r24, 0x02C9
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1054:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1056:	61 f4       	brne	.+24     	; 0x1070 <CDC_Device_ProcessControlRequest+0x15a>
    1058:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    105c:	87 7f       	andi	r24, 0xF7	; 247
    105e:	80 93 e8 00 	sts	0x00E8, r24
    1062:	7f db       	rcall	.-2306   	; 0x762 <Endpoint_ClearStatusStage>
    1064:	60 91 cb 02 	lds	r22, 0x02CB
    1068:	ce 01       	movw	r24, r28
    106a:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    106c:	cf 91       	pop	r28
    106e:	52 cf       	rjmp	.-348    	; 0xf14 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <__tablejump2__>:
			}

			break;
	}
}
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31

0000107a <__tablejump__>:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    107a:	05 90       	lpm	r0, Z+
    107c:	f4 91       	lpm	r31, Z
			}

			break;
	}
}
    107e:	e0 2d       	mov	r30, r0
    1080:	09 94       	ijmp

00001082 <_exit>:
    1082:	f8 94       	cli

00001084 <__stop_program>:
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <__stop_program>
